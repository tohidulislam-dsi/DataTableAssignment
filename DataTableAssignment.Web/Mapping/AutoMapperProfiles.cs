using AutoMapper;
using DataTableAssignment.Web.Models.Domain;
using DataTableAssignment.Web.Models.Dto;
using DataTableAssignment.Web.Models.Response;
using DataTableAssignment.Web.Models.ViewModel;

namespace DataTableAssignment.Web.Mapping
{
    public class AutomapperProfiles : Profile
    {
        public AutomapperProfiles()
        {
            CreateMap<Employee, EmployeeDto>().ReverseMap();

            CreateMap<EmployeeDto, EmployeeViewModel>().ReverseMap();
            CreateMap<EmployeeWithTotalFilteredRecords, Employee>().ReverseMap();
            CreateMap<EmployeeFilterResultDto<Employee>, EmployeeFilterResultDto<EmployeeDto>>()
                .ForMember(dest => dest.data, opt => opt.MapFrom(src => src.data));
            CreateMap<EmployeeFilterResultDto<EmployeeWithTotalFilteredRecords>, EmployeeFilterResultDto<EmployeeDto>>()
                .ForMember(dest => dest.data, opt => opt.MapFrom(src => src.data));
            CreateMap<EmployeeFilterResultDto<EmployeeDto>, EmployeeFilterResultDto<EmployeeViewModel>>()
                .ForMember(dest => dest.data, opt => opt.MapFrom(src => src.data));
            CreateMap<EmployeeFilterResultDto<EmployeeDto>, EmployeeFilterResponseModel>()
                .ForMember(dest => dest.data, opt => opt.MapFrom(src => src.data))
                .ForMember(dest => dest.recordsTotal, opt => opt.MapFrom(src => src.recordsTotal))
                .ForMember(dest => dest.recordsFiltered, opt => opt.MapFrom(src => src.recordsFiltered));

            CreateMap<EmployeeViewModel, EmployeeDetailsDto>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Assuming Id is generated by the database
                .ForMember(dest => dest.EmployeeId, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Address, opt => opt.MapFrom(src => src.Address))
                .ForMember(dest => dest.PhoneNumber, opt => opt.MapFrom(src => src.PhoneNumber));

            CreateMap<EmployeeViewModel, EmployeeBenefitsDto>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Assuming Id is generated by the database
                .ForMember(dest => dest.EmployeeDetailId, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.BenefitType, opt => opt.MapFrom(src => src.BenefitType))
                .ForMember(dest => dest.BenefitValue, opt => opt.MapFrom(src => src.BenefitValue));
            CreateMap<EmployeeDetailsDto, EmployeeDetails>().ReverseMap();
            CreateMap<EmployeeBenefitsDto, EmployeeBenefits>().ReverseMap();
            CreateMap<(EmployeeDto, EmployeeDetailsDto, EmployeeBenefitsDto), EmployeeViewModel>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Item1.Id))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Item1.Name))
                .ForMember(dest => dest.Position, opt => opt.MapFrom(src => src.Item1.Position))
                .ForMember(dest => dest.Office, opt => opt.MapFrom(src => src.Item1.Office))
                .ForMember(dest => dest.Age, opt => opt.MapFrom(src => src.Item1.Age))
                .ForMember(dest => dest.Salary, opt => opt.MapFrom(src => src.Item1.Salary))
                .ForMember(dest => dest.Address, opt => opt.MapFrom(src => src.Item2.Address))
                .ForMember(dest => dest.PhoneNumber, opt => opt.MapFrom(src => src.Item2.PhoneNumber))
                .ForMember(dest => dest.BenefitType, opt => opt.MapFrom(src => src.Item3.BenefitType))
                .ForMember(dest => dest.BenefitValue, opt => opt.MapFrom(src => src.Item3.BenefitValue));


        }
    }
}
